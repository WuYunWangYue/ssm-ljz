<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.ljz.controller">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 以上已做了该配置要做到事情,所以移除 -->
    <!--<context:annotation-config/>-->

    <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
    <mvc:annotation-driven/>

    <!-- 对进入DispatcherServlet的URL进行筛查，
         如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，
         如果不是静态资源的请求，才由DispatcherServlet继续处理 -->
    <mvc:default-servlet-handler/>

    <!-- 静态资源访问  css js imgs -->
    <mvc:resources location="/static/**" mapping="/static/"/>
    <mvc:resources location="/resources/" mapping="/resources/**/"/>

    <!-- 访问拦截 -->
<!--    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**/**"/>
            <bean class="com.ljz.test.interceptor.UserRoleAuthorizationInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>-->

    <!-- 避免IE执行AJAX时，返回JSON出现下载文件 -->
<!--    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>-->

     <!-- 配置ViewResolver 。可用多个ViewResolver 。使用order属性排序。   InternalResourceViewResolver 放在最后 -->
<!--    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"></property>
        <property name="mediaTypes">
            <map>
                &lt;!&ndash; 告诉视图解析器，返回的类型为json格式 &ndash;&gt;
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
                <entry key="htm" value="text/htm"/>
            </map>
        </property>
        <property name="defaultViews">
            <list>
                &lt;!&ndash; ModelAndView里的数据变成JSON &ndash;&gt;
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
            </list>
        </property>
        <property name="ignoreAcceptHeader" value="true"></property>
    </bean>

    <bean class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="favorPathExtension" value="true"/>
        <property name="favorParameter" value="true"/>
        <property name="ignoreAcceptHeader" value="true"></property>
        <property name="defaultContentType" value="text/html"/>
        <property name="mediaTypes">
            <map>
                &lt;!&ndash; 告诉视图解析器，返回的类型为json格式 &ndash;&gt;
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
                <entry key="htm" value="text/htm"/>
                <entry key="file" value="application/octet-stream"/>
                <entry key="image" value="image/*"/>
            </map>
        </property>
    </bean>-->

    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->
    <!-- VIEW 解析 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--全局异常捕捉 -->
    <bean id="exceptionResolver" class="com.ljz.resolver.MyExceptionResolver"/>

    <!-- 上传拦截，如最大上传值及最小上传值 -->
    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="104857600"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="4096"/>
        <!-- 启用是为了推迟文件解析，以便捕获文件大小异常 -->
        <property name="resolveLazily" value="true"/>
    </bean>



</beans>